DENTRO DO DBEAVER:

AO CRIAR OS CAMPOS DA TABELA
int > São dois bilhões de registros para menos e 2 bilhões para mais a partir do zero
intunasigned > São quatro bilhões de registros para mais a partir do zero
varchar (quantidade) > Define que o tipo utilizado terá um complemento variável com a quantidade definida entre parênteses
datetime > tipo de data completa com horas, minutos, segundos, etc
date > tipo de data somente com dias, meses e anos
datetime ou date com padrão "now()" > adiciona a data na coluna de forma automática na hora do registro
datetime ou date com padrão "now() on update now()" > adiciona a data na coluna de forma automática ao atualizar um registro
enum > Quando utiliza um input select e pode-se ter vários valores diferentes


SCRIPTS DO DBEAVER
# ou -- ou /* */ > Serve para fazer comentários no script MySQL no DBEAVER
CTRL+ENTER > Serve para executar os scripts


SCRIPTS MySQL

use nome_da_base_de_dados; > Todo código executado será relacionado a essa base de dados
show tables; > Mostra as tabelas de uma base de dados
describe nome_da_tabela; > Mostra todas as colunas da tabela e suas informações


INSERT

INSERT INTO tabela (coluna1, coluna2, coluna3) VALUES ("primeiroValor", "segundoValor", "terceiroValor"); > Insere na tabela os valores em ordem.
Lembrando que pode inserir mais de uma linha na tabela, dessa forma: (coluna1, coluna2, coluna3) VALUES ("primeiroValor", "segundoValor", "terceiroValor"),
("primeiroValor", "segundoValor", "terceiroValor"), ("primeiroValor", "segundoValor", "terceiroValor");


SELECT INSERT

INSERT INTO tabela2 (coluna1, coluna2, coluna3) SELECT (coluna1, coluna2, coluna3) FROM tabela1; > Insere valores em uma tabela usando valores de outra.
INSERT INTO tabela2 (coluna1, coluna2, coluna3) SELECT CONCAT ("Coluna núm: ", coluna1), ("Coluna núm: ", coluna2), ("Coluna núm: ", coluna3) FROM tabela1; >
 Insere valores em uma tabela usando valores de outra concatenando os valores de texto com os das colunas.

SELECT

SELECT * FROM tabela t > Seleciona tudo de uma tabela. O "t" ali é um apelido para a tabela e pode ser usado posteriormente.
SELECT coluna FROM tabela1 t > Seleciona uma coluna específica de uma tabela. Para selecionar mais colunas, é só separar como vírgula. Ex.: tabela1, tabela2...
SELECT * FROM tabela WHERE coluna1 >10 > Seleciona tudo de uma tabela onde o coluna escolhido tem valor maior que 10. Pode fazer com strings, datas, floats, etc.
SELECT * FROM tabela WHERE coluna1 >10 AND coluna2 = "Nome" > Seleciona tudo da tabela onde coluna1 é maior que 10 e coluna2 tem "Nome". Para "ou", usa-se "or"
SELECT * FROM tabela WHERE coluna BETWEEN 25 AND 100; > Seleciona na coluna da tabela que estão entre 25 e 100.
SELECT * FROM tabela WHERE coluna IN (110, 115, 120); > Seleciona na coluna da tabela somente os dados iguais a 110, 115 e 120.
SELECT * FROM tabela WHERE coluna LIKE "%bio"; > Seleciona na coluna da tabela os valores terminados em "bio". A % significa "qualquer coisa ". Pode-se utilizar
por exemplo LIKE "F%io" para dizer que há um F antes de qualquer coisa que vem antes de io. Para ser mais específico, pode-se utilizar LIKE "F___o" para dizer que
há uma palavra de 5 letras e que há qualquer coisa nas 3 letras entre o F e o O.
SELECT * FROM tabela ORDER BY coluna1 ASC, coluna2 DESC; > Ordena a tabela primeiro pela coluna1 crescente e depois ordena a coluna2 decrescente.
SELECT * FROM tabela LIMIT 2; > Limita para os dois primeiros resultados.
SELECT * FROM tabela LIMIT 2 OFFSET 3; > Limita para dois resultados, porém pulando os 3 primeiros.

Select Composto
SELECT tabela1.coluna, tabela2.coluna FROM tabela1, tabela2 WHERE tabela1.coluna = tabela2.coluna; > Seleciona uma coluna de cada tabela.
SELECT t1.coluna, t2.coluna FROM tabela1 AS t1, tabela2 AS t2; > Igual acima, seleciona uma coluna de cada tabela, mas dá nome para elas. Bom para IDs. 
SELECT coluna1, coluna1 FROM tabela1, tabela2 WHERE tabela1.coluna1 = tabela2.coluna1; > Mostra corretamente a ligação entre duas tabelas. Essencial para IDs.

JOINS
SELECT coluna1, coluna2 FROM tabela1 INNER JOIN tabela2 ON tabela1.coluna1 = tabela2.coluna1; > Mostra registros de duas colunas da tabela1 quando houver uma
correspondência entre a coluna1 da tabela1 e a coluna1 da tabela2.
SELECT coluna1, coluna2 FROM tabela1 INNER JOIN tabela2 ON tabela1.coluna1 = tabela2.coluna1; > O mesmo que em cima, mas, mesmo que não tiver correspondência
entre as colunas indicadas, todas as colunas da tabela esquerda aparecerão e as da direita aparecerão com nulo ou algum valor, se tiverem. A INNER JOIN só Mostra
quando há a correspondência.
RIGHT JOIN é o contrário.


UPDATE

UPDATE tabela set coluna1 = "Outro nome", coluna2 = outroValor WHERE coluna = 1; > Atualiza duas colunas da tabela onde a coluna buscada for igual a 1.
UPDATE tabela set coluna1 = round (rand() * 10000, 2); > Atualiza a coluna1 com um número aleatório até 10000, sendo que o round limita 2 casas após a vírgula.


DELETE

DELETE FROM tabela WHERE coluna = 1; > Deleta da tabela quando a coluna tiver o valor 1. Geralmente se deleta pela primary key.
DELETE FROM tabela WHERE coluna BETWEEN 1 AND 5; > Deleta da tabela os registros da coluna entre 1 e 5.


______________________________________________________________________________________________________



KNEX > O Knex.js é um construtor de consultas SQL para Node.js
Para utilizar o KNEX, deve-se ter primeiro o MySQL instalado, o NODE importado e depois importar o KNEX (aula 535)


IMPORTAÇÃO DO KNEX
Digitar no terminal> npm install knex


IMPORTAÇÃO DO MySQL
Digitar no terminal> npm install mysql2
pg (postgree), sqlite3 (SQL Lite), mysql2 (MySQL), oracledb (Orcale), mssql (Microsoft SQL)


INICIALIZAÇÃO DO KNEX
Digitar no terminal> npx knex init
Manter o código abaixo, alterando somente client, caso seja diferente, database, user e password.
/**
 * @type { Object.<string, import("knex").Knex.Config> }
 */
module.exports = {
    client: 'mysql2',
    connection: {
      database: 'base_de_dados_knex',
      user:     'root',
      password: 'admin'
    },
    pool: {
      min: 2,
      max: 10
    },
    migrations: {
      tableName: 'knex_migrations'
    }
  };


MIGRATIONS KNEX (Recurso que permite controlar o banco de dados, criando e excluindo tabelas e seus campos)
npx knex --help > Exibe todos os comandos que podem ser executados no KNEX.
npx knex migrate:make 'create_users' > Cria um arquivo Migration com métodos UP e DOWN, que vai ficar registrado na pasta Migrations.

DENTRO DO ARQUIVO CRIADO NA PASTA MIGRATIONS
npx knex migrate:up > Executa a próxima migração ou a migração específica que ainda não foi executada na pasta Migrations.
npx knex migrate:down > Desfaz a última migração ou a migração específica que já foi executada na pasta Migrations.

COMANDOS QUE NÃO SÃO EXECUTADOS DENTRO DO ARQUIVO CRIADO NA PASTA MIGRATIONS
npx knex migrate:latest > Executa todas as migrações que ainda não foram feitas, como se fosse um UPDATE.
npx knex migrate:rollback > Reverter o último lote de migrações realizadas. Diferente do down, ele não executa a função, então uma tabela criada perderá
apenas os campos, ficando vazia.


CRIAR UMA TABELA COM KNEX

//Dentro da função UP (A função UP envia o comando para executar):
return knex.schema.createTable('users', (table) =>{
    table.increments('id').primary();
    table.string('first_name', 150).notNullable();
    table.string('last_name', 150);
    table.string('email', 255).notNullable().unique();
    table.string('password_hash', 255).notNullable().unique();
    table.decimal('salary', 15, 2).notNullable();
    table.timestamps(true, true); //cria os campos created_at e updated_at com a data e hora automaticamente
  });

  //Dentro da função DOWN (A função DOWN reverte o comando executado, caso necessário):
  return knex.schema.dropTable('users');


  ALTERAR UMA COLUNA DE UMA TABELA COM O KNEX

  //Dentro da função UP (altera a coluna escolhida):
  return knex.schema.alterTable('usuarios', (table) =>{
    table.string('telefone', 30).alter(); // Altera o tipo da coluna 'telefone' para VARCHAR(30)
  });

  //Dentro da função DOWN (altera a coluna escolhida):
   return knex.schema.alterTable('usuarios', (table) =>{
    table.string('telefone', 30).alter(); // Desfaz a alteração para VARCHAR(20) na coluna 'telefone'
  });


ESTABELECER RELAÇÕES ENTRE AS TABELAS
Depois dos campos normais e da outra tabela ser criada, fazemos as relações, onde:

RELAÇÃO DE 1 PARA 0 OU 1
    table.integer('user_id').unique().unsigned(); //cria uma coluna numérica inteira, única(1 para 0 ou 1) e sem sinais
    table.foreign('user_id').references('users.id').onDelete('CASCADE').onUpdate('CASCADE'); //relaciona a coluna user_id
//da tabela profiles com a coluna id da tabela users, mostrando que 1 usuário poderá ter 0 ou 1 perfis, onde o mesmo será
//apagado ou atualizado junto com users por conta do efeito cascata

RELAÇÃO DE MUITOS PARA MUITOS
    coluna.integer('user_id').unsigned();
    coluna.foreign('user_id').references('users.id').onDelete('CASCADE').onUpdate('CASCADE');

    coluna.integer('role_id').unsigned();
    coluna.foreign('role_id').references('roles.id').onDelete('CASCADE').onUpdate('CASCADE');
//Foram criados user_id e role_id com referências a users.id e roles.id, como uma foreign key, sendo que, como não tem
//unique, a relação se torna muitos para muitos
    coluna.primary(['user_id','role_id']); //indica que os dois campos são também uma chave primária

-----------------------------

CRIAR ARQUIVO .JS QUE SE CONECTA COM O KNEX (Após terminar as Migrations da tabela em questão)
É só criar um arquivo com qualquer nome e inserir os códigos abaixo para conectar ao KNEX:

const knexfile = require('../../knexfile'); //Aqui coloca o diretório do arquivo de conexão KNEX ao banco de dados
const knex = require('knex')(knexfile); //Aqui acessa a biblioteca Knex e passa o arquivo da constante anterior
module.exports(knex); //Aqui exporta a conexão para depois ser importada (require) em outro arquivo



KNEX INSERT
Primeiro se importa a conexão do banco e cria um array com 1 ou mais objetos para fazer a inserção. Depois disso faz a
inserção, trata o erro e encerra a conexão com o banco.

const knex = require('./connection');

const data = {
    first_name: 'José',
    last_name: 'Santos Melo',
    email: 'josesantos2502@gmail.com',
    password_hash: 'melo@1958',
    salary: 1415.00
};

knex('users')
.insert(data).then(() =>{ 
    console.log('Dados inseridos com sucesso!'); 
})
.catch(()=>{ 
    console.log('Os dados não foram inseridos'); 
})
.finally(() =>{ 
    knex.destroy(); 
});



KNEX SELECT
Seleção simples de uma ou mais colunas da tabela. Quase igual ao insert, porém apenas seleciona as colunas:

knex('users').select('email', 'first_name').then(...).catch(...).finally(...);

SELECT COM ALIAS EM COLUNA> knex('users').select('email as ue', 'first_name as ufn').then(...).catch(...).finally(...);
SELECT COM ALIAS EM TABELA> knex('users as u').select('email', 'first_name').then(...).catch(...).finally(...);

SELECT COM WHERE> knex('users').select('*').where('first_name', '=', 'José').then(...).catch(...).finally(...);
SELECT COM WHERE COMPOSTO> knex('users').select('*').where({id: 4, first_name: 'José'}).then(...).catch(...).finally(...);
SELECT COM WHERE COMPOSTO E ALIAS> knex('users').select('salary as Salário').where({id: 4, first_name: 'José'}).then(...).catch(...).finally(...);
SELECT COM WHERE COMPOSTO E ORWHERE> knex('users').select('*').where('first_name', '=', 'José').orwhere('id', '=', 4).then(...).catch(...).finally(...);
SELECT COM WHERE COMPOSTO E ANDWHERE> knex('users').select('*').where('first_name', '=', 'José').andwhere('id', '=', 2).then(...).catch(...).finally(...);
SELECT COM WHERE E ANDWHEREBETWEEN> knex('users').select('*').where('first_name', '=', 'José').andWhereBetween('id', [1,20]).(...).(...).(...)

OUTROS WHERE> .wherein('id', [1,2,4,5,28,54]);
SELECT COM LIKE> knex('users').select('*').where('first_name', 'like', '%iane').(...).(...).(...) | .where('first_name', 'like', '___iane') | EXIBE TATIANE


SELECT COMPOSTO COM INNERJOIN (Seleção de duas tabelas diferentes)

knex('users as u')
  .select('u.id as uid', 'p.id as pid', 'p.bio', 'u.first_name')
  .innerJoin('profiles as p', 'u.id', 'p.user_id')
  .where('u.first_name', 'like', '%a')
  .orderBy('u.id', 'asc')
  .limit(5);


ORDER BY> .orderBy('id','desc') |  .orderBy('id','asc') > Ordem descendente e ascendente
OFFSET> .offset(7) > Pula a exibição de 7 registros
LIMIT> .limit(5) > Exibe apenas 5 registros
ROUND E RAND > salary: knex.raw('round(rand() * ?, ?)', [10000, 2]) > Round serve para mostrar números após a vírgula (max 2). Rand serve para sortear números
reais entre 0 e 1. Ambos não existem no Knex, por isso precisam de Knex.raw para usá-los.
const select = knex('users')
 MAX > .max('salary as max_salary') > O maior registro dentre os selecionados
 MIN > .min('salary as min_salary') > O menor registro dentre os selecionados
 AVG > .avg('salary as avg_salary') > A média dos registros dentre os selecionados
 SUM > .sum('salary as sum_salary') > Soma de todos os registros escolhidos
 COUNT > .count('salary as count_salary'); > Quantos registros foram encontrados
GROUPBY > .groupBy('coluna1', 'coluna2') >  Agrupa os resultados pelo valor das colunas coluna1 e coluna2.


DELETE
Deleta um ou mais registros da tabela:

knex('users').delete().where('id', '=', 18)



UPDATE
Primeiro prepara dos dados, depois faz o select e depois atualiza um ou mais registros na tabela:

const novosDados = {
    first_name: 'Erick',
    last_name: 'Silva Cruz',
    email: 'erickcruz@gmail.com',
    password_hash: 'eruz123',
    salary: 2200
};

knex('users')
  .where({ id: 29 }) // Condição para selecionar o registro a ser atualizado (por exemplo, onde o id é igual a 1)
  .update(novosDados) // Dados a serem atualizados
  .then(() => {
    console.log('Dados atualizados com sucesso!');
  })
  .catch(() => {
    console.log('Erro ao atualizar dados');
  })
  .finally(() => {
    knex.destroy();
  });



KNEX QUERY
Executa um código SQL cru no Knex:

knex.raw(query).then(...).catch(...).finally(...);