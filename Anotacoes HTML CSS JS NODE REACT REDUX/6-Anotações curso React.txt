PARA INSTALAR O REACT NUMA PASTA DE UM PROJETO
Primeiro, a pasta não pode conter nenhuma letra maiúscula e não precisa iniciar o node para instalar o REACT.

-----WEBPACK-----
{
  Para instalar o REACT com WEBPACK, o código é o seguinte: "npx create-react-app ."
  Se quiser importar para um projeto que ainda não existe, deve substituir o "." pelo nome da pasta, ficando npx create-react-app nomedapasta

  APÓS INSTALADO, O REACT IMPORTA VÁRIAS PASTAS, SENDO A "SRC" QUE FICAM OS NOSSOS CÓDIGOS E A "PUBLIC" O ARQUIVO INDEX DO REACT 
  PARA INICIAR A APLICAÇÃO NO WEBPACK COM O REACT INSTALADO, UTILIZE O SEGUINTE CÓDIGO NO TERMINAL DA PASTA DO PROJETO: "npm start"
  *PARA PARAR A APLICAÇÃO, UTILIZE "CTRL+C" NO TEMRINAL 

  PARA COMPILAR O PROJETO E FAZER O DEPLOY (IMPLANTAR), FAZENDO COM QUE ELE ESTEJA PRONTO PARA HOSPEDAGEM, UTILIZAMOS O COMANDO:
  "npm run build"
  Assim que concluir, uma pasta chamada "build" será criada, já com o projeto todo compilado.
  -----------
}


-----VITE-----
{
  1-PARA INSTALAR O REACT COM O VITE, O CÓDIGO É O SEGUINTE: "npm create vite@latest", DEPOIS DIGITAR O NOME DO PROJETO E O FRAMEWORK, QUE NO CASO SERÁ O REACT.
  2-DEPOIS ABRA O TERMINAL DO DIRETÓRIO ONDE FICARÁ O PROJETO OU ACESSE NO MESMO TEMRINAL ANTERIOR: "cd meu-projeto-vite"
  3-DEPOIS DE CRIADO O PROJETO, DEVE-SE UTILIZAR O CÓDIGO: "npm install"
  *SE UM PROJETO JÁ CRIADO FOR IMPORTADO, TAMBÉM PRECISA UTILIZAR O CÓDIGO: "npm install"
  4-PARA INICIAR A APLICAÇÃO (SERVDOR) NO VITE COM O REACT E ELE INSTALADOS, UTILIZE O SEGUINTE CÓDIGO NO TERMINAL DA PASTA DO PROJETO: "npm run dev"
  *SE QUISER ABRIR A APLICAÇÃO EM OUTRO PC OU DISPOSITIVO ATRAVÉS DESSE SERVIDOR, UTILIZE O SEGUINTE CÓDIGO NO TERMINAL: "npm run dev -- --host"
  5-PARA PARAR A APLICAÇÃO, UTILIZE "CTRL+C" NO TEMRINAL
  -----------
}



O ARQUIVO PRINCIPAL EM JS, QUE ESTÁ DENTRO DE "SRC" SE CHAMA "App.js", que é o arquivo que compila o código e dá start na página. 
Há também o "index.css" e o "index.js".
Por padrão, o navegador não entende JSX, que é o arquivo REACT que tem JS e HTML, então precisa que o App.js faça essa "tradução" 
e rode no navegador esse arquivo transcrito.





--INICIANDO A PROGRAMAÇÃO--


-----REACT-----

MÉTODOS DE CICLO DE VIDA OU LIFECYCLE METHODS NO REACT (São métodos de ciclo de vida dos componentes):
{
  render(){ return ();} > Método raiz de construção no REACT. Ele funciona como se fosse o método Start() do Unity 3D

  componentDidMount(){} > Método que executa código depois que o componente é montado no DOM

  componentWillUnmont(){} > Método que realiza tarefas de limpeza quando o componente está prestes a ser removido do DOM.
  Ele é chamado imediatamente antes de um componente ser desmontado e destruído.

  componentDidUpdate(){} > Método que executa sem interrupção, ou seja, igual ao método Update do Unity 3D
}


-----JSX (Javascript + HTML)-----


-----COISAS BÁSICAS-----

*JAVASCRIPT - Para inserir código Javascript dentro do HTML, precisa-se colocar dentro de chaves {}
**ARROW FUNCTION - Só há necessidade quando for usar algum parâmetro numa Prop ou num evento ou mudar algum State. Ex.: <button OnClick={funcao}> ou <button OnClick={()=> estado(true)}
***RETURN - Para retornar a função exportada de componentes em React (páginas), os elementos devem estar dentro de um container. Caso haja mais para exportar, pode-se usar fragment <> </>


-----EXPORT DEFAULT E EXPORT-----
{
  No react, só pode exportar apenas uma função default no arquivo .jsx, então isso implicará no import em outro arquivo.

  EXPORT DEFAULT FUNCTION> Para "export default function", a importação terá de ser feita normalmente: import qualquerNome from './nomeDoArquivo';

  EXPORT FUNCTION> Para "export function", a importação terá de ser feita entre { }: import { qualquerNome } from './nomeDoArquivo';
}


-----DIFERENÇAS ENTRE HTML E JSX-----
{
  Uma ferramenta boa para transcrever código e mostrar a diferença entre um código html e um com jsx é o site > transform.tools/html-to-jsx
  *Todo arquivo .jsx precisa começar com letra maiúscula.


  CLASS - CLASSNAME (No HTML, a classe CSS se chama class, já no JSX, a classe CSS se chama classname)
  <div class = ""> </div> = HTML
  <div classname = ""> </div> = JSX


  FOR - HTMLFOR (Serve para quando o usuário clicar num label, o campo correspondente a esse texto ser focado. O id do campo deve ter o mesmo nome do for)
  <label for="nome">Nome: </label> = HTML
  <label htmlFor="nome">Nome: </label> = JSX


  EVENTOS - Os eventos em JS e Html são escritos com letras minúsculas, já em React se usa a segunda palavra com letra maiúscula
  <button onClick={() => console.log('Clicado!')}>Clique Aqui</button>
  <input onChange={(e) => console.log(e.target.value)} />


  Resumo das Alterações
  HTML	        REACT (JSX)
  class	        className
  for	          htmlFor
  checkd        defaultChecked
  onclick	      onClick
  readonly	    readOnly
  maxlength	    maxLength
  minlength	    minLength
  tabindex	    tabIndex
  spellcheck	  spellCheck
  autocomplete	autoComplete
  novalidate	  noValidate
}


-----RENDERIZAÇÃO DE LISTAS COM FUNÇÃO MAP-----
{
  Suponha que você tem uma lista de frutas para renderizar no React:
  const fruits = ["Maçã", "Banana", "Laranja", "Uva"];

  export default function FruitList() {
    return (
      <ul>
        {fruits.map((fruit, index) => (
          <li key={index}>{fruit}</li> // `key` é importante para identificar os itens unicamente
        ))}
      </ul>
    );
  }
  *MAP - Itera sobre o array fruits e retorna um elemento <li> para cada item da lista. Nesse caso, exibe uma lista <li> com 4 frutas.
  **KEY - O atributo key é necessário para que o React identifique unicamente cada item mapeado e possa otimizar atualizações.
}


-----FUNÇÃO FILTER-----
{
  .filter(): Esse método cria um novo array contendo apenas os itens que atendem a uma condição.
  A condição é definida pela função passada para o .filter().
}


-----VERIFICAÇÃO CONDICIONAL EM JAVASCRIPT-----
{
  OPERADORES ? : (VERDADEIRO OU FALSO)
  Utilizado como if, ele exibe verdadeiro "?" ou falso ":". Ex.:  {product.discountedPrice ? <h4>$ {product.discountedPrice}</h4> : ''}

  OPERADOR && (VERDADEIRO À ESQUERDA) - Uma alternativa para não deixar vazia a verificação com '', utilizar && retornará tudo que vier de verdadeiro antes dele e parará quando algo vier falso.
  O código testado usando && deve ser verdadeiro, então ele exibirá tudo que vier após, senão não exibe. Ex.:  {product.discountedPrice && <h4>$ {product.discountedPrice}</h4>}
}



-----COMPONENTES-----
{
  Os componentes, que são fragmentos das páginas, por questões de limpeza e organização de código, devem ficar separados em arquivos distintos, sendo exportados e importados no App principal,
  que seria o App.jsx. Cada seção de uma página pode ser feita de forma separada e unida depois em fragmentos, compondo o site no final. Arquivos CSS serão importados dentro de seus componentes.
  *Também pode-se fazer um componente ser renderizado e esse mesmo componente renderizar outra coisa de outro componente.

  PARA EXPORTAR > export default function NomeDaFuncao (){} OU function NomeDaFuncao (){} export default NomeDaFuncao
  PARA IMPORTAR > import QualquerNomeDeFuncao from './components/NomeDoArquivoDaFuncao'; | Depois acessa o componente assim: <NomeDaFuncao /> 
  *CASO ACESSE O COMPONENTE MAPEADO, DEVE-SE MANTER A KEY NESSE ACESSO PARA EVITAR ERRO. | <NomeDaFuncao key={lista.id} />
}



-----PROPS----- 
{
  São funções importadas que passam atributos internamente, em vez de serem somente acessadas. Ex.: export default function NomeDaFuncao ({atributo}){}
  Depois acessa o componente assim: <NomeDaFuncao nomeDoProp={atributoPassado} key={lista.id}
}



-----STATES-----
{
  É um recurso do REACT que dá um estado a uma variável, indicando que a página atualizará automaticamente esta variável caso haja uma mudança nesse estado dessa variável.

  PARA IMPORTAR A BIBLIOTECA > import { useState } from 'react';
  EXEMPLO DE VARIÁVEL DE ARRAY DECLARADA COM STATE > const [items, setItems] = useState( [ { } ] );
                                                     decl, variavel, estado, = tipo hook (valorDoEstado) > O valor pode ser falso, nulo, array, uma variável ou um valor qualquer


  -----ALTERAR UM ESTADO (STATE)-----
    {
      Depois de declarar o estado, que pode estar falso, verdadeiro, vazio (null) ou com uma lista, pode-se alterar, digamos, essa lista, com filter. Exemplo: 
      const [fruits, setFruits] = useState(
        [
          {
            fruta: "Maçã",
            cor: "vermelha",
            madura: false
          }, 
          {
            fruta: "Banana",
            cor: "amarela",
            madura: true
          }, 
          {
            fruta: "Laranja",
            cor: "laranja",
            madura: false
          },
          {
            fruta: "Uva",
            cor: "roxa",
            madura: false
          },     
        ]
      );

      const handleMaduraChange = (frutaNome) => {
        setFruits((prevFruits) =>
          prevFruits.map((fruit) =>
            fruit.fruta === frutaNome ? { ...fruit, madura: true } : fruit
          )
        );
      };
      // Exemplo de chamada para atualizar a laranja
      handleMaduraChange("Laranja");
      }
    }
}



-----EVENTS-----
{
  *UTILIZAMOS e.preventDefault(); para parar um evento ou o envio de formulário para ser tratado, porém ele não impede o elemento pai de 
  acionar o evento dele também, por isso que devemos utilizar: e.stopPropagation();
  **Em React é comum criar funções chamadas handle + nome do evento, tipo handleClick, handleMouseOver, handleScroll, etc, para identificar que essa função conterá um evento.

  ONCLICK (onClick) - Para adicionar um evento de click (assim como qualquer outro), fazemos assim (exemplo dentro de um button):

  function handleClick(){
    Ação que o botão clicado fará.
  }

  return(
    <button onClick={handleClick}>Clique Aqui</button>
  )
}



-----PROP ARGUMENTS AND EVENTS-----
{
  *Passando propos para outro componente e acessando os dados passados nele para realizar eventos e outras ações.
  **No exemplo abaixo, faz-se o mapeamento da lista de itens, faz a prop e envia esse item para o Componente, depois envia o evento de click como prop também para o Componente.
  Dentro da div, aciona o evento de click, porém retornando a prop com o id do item e exibindo o alerta.
  {
    export default function Principal(){
      return(
      {
        items.map(item =>
          <Componente
            item={item}
            eventoOnClick={(id) => alert(`Exibindo o id ${id} do componente clicado`)}
            key={item.id}
          />  
          )
      }
    );
    }

    export default function Componente({item, eventoOnClick}) {
      return (
        <div onClick={ ()=> eventoOnClick(item.id)} </div>
      );
    }
  }

  ***Outro exemplo, mas com o uso de outra função para processar os argumentos.
  {
      export default function App() {

          function quantityHandler(e, id, increment) {
              e.stopPropagation();
              alert("Olá");
          }

          return (
                  <Item changeQuantity={(e, id, increment) => quantityHandler(e, id, increment)} />
          )
      }

      export default function Item({changeQuantity}) {

          return (
                  <div className="quantity-area">
                      <button onClick={(e) => changeQuantity(e, id, +1)}>+</button>
                  </div>
          )
      }
  }

  ****Exemplo de como passar props, remover um item de uma lista e alterar o outro já feito:
  {
    //fazer os imports no component TodoList

    const lista = [
      { id:0, titulo: Lista1, feito: true }
      { id:1, titulo: Lista2, feito: true }
      { id:2, titulo: Lista3, feito: false }
    ]
    export default function TodoList(){
      const [listar, setListar] = useState(lista);

      removerTodoHandler(id){
        if(confirm("Você tem certeza que deseja apagar a tarefa?")){
          setListar(listar.filter(todo => todo.id !== id));
          //Verifica se ao listar a lista, o id que está sendo exibido é diferente do id passado para ser apagado, pois o
          //filter criará um novo array com os ids que são diferentes. Quando chegar no id correto, ele não será listado
        }
      }

        alternarParaFeitoHandler(id){
          setListar(listar.map(todo =>{
            if(todo.id === id){
              todo.feito = !todo.feito;
              return todo;
            } else{
              return todo;
            }
          }));
      }

      return(
        <>
        <div className="todos">
        {listar.map(todo =>
        <Todo
        removerTodo={(id) => removerTodoHandler(id)}
        alternarParaFeito={(id) => alternarParaFeitoHandler(id)}
        todo={todo}
        key={todo.id}
        />
        )}
        </div>
        </>
      )
    }

    (fazer os imports no component Todo)

    export default function Todo(todo, removerTodo, alternarParaFeito){

      return(
        <>
        <div className={`todo ${todo.feito ? 'feito' : ''}`}>
        <button onClick={()=> removerTodo(todo.id)} className="btnApagar">APAGAR</button>
        <h1>{todo.titulo}</h1>
        <input type="checkbox" defaultChecked={todo.feito} onClick={()=> alternarParaFeito(todo.id)} />
        </div>
        </>
      )
    }
  }
}



-----CONTEXT-----
{
  É utilizado para passar informações entre os componentes distantes, mas sem a necessidade de ter que passar para os componentes pais até o topo.
  Com o context, deve-se notar qual elemento acima (pai) é o mais perto dos elementos os quais precisamos passar essas informações.
  Após identificado, deve-se colocar todas essas informações nesse componente principal, daí somente passar as informações adiante.

  *Seguindo o exemplo acima dos arguments e events, utilizaremos o context.
  **A lista que estava em TodosList ficará agora em App, assim como os estados (states) para alteração

  >>>TodosContext.js<<<
  {
    import {createContext} from 'react';

    export const TodosContext = createContext(""); //Cria um contexto em react que será utilizado depois, por isso a String vazia
  }


  >>>App.jsx<<<
  {
    import {TodosContext} from './TodosContext.js'; //importa o component TodosContext
    import {useState} from 'react';

    coloca a lista do TodosList

    function App()
    {
      coloca o state que liga com a lista

      return(
        <>
        <TodosContext.Provider value={{listar, setListar}}> 
        //o provider é o componente usado para distribuir os dados do contexto (value) para todos os componentes 
        //que estão dentro dele (filhos) na árvore de componentes.
        </>
      )
    }
  }


  >>>TodosList.jsx<<<
  {
    import {createContext} from 'react';
    import {TodosContext} from './TodosContext.js'; //importa o component TodosContext

    export default function TodosList(){
      
      const contexto = useContext (TodosContext); 
      //Aqui o atributo contexto receberá todo contexto enviado pelo TodosContext através do App ("listar", "setListar")
      //Agora o que era "listar" passará a ser "contexto.listar" ou "contexto.setListar", pois contexto nada mais é
      //que uma cópia dinâmica do "listar" e "setListar", que são os states

      removerTodoHandler(id){
            if(confirm("Você tem certeza que deseja apagar a tarefa?")){
              store.setListar(contexto.listar.filter(todo => todo.id !== id));
            }
          }

            alternarParaFeitoHandler(id){
              contexto.setListar(contexto.listar.map(todo =>{
                if(todo.id === id){
                  todo.feito = !todo.feito;
                  return todo;
                } else{
                  return todo;
                }
              }));
          }

          return(
            <>
            <div className="todos">
            {contexto.listar.map(todo =>
            <Todo
            removerTodo={(id) => removerTodoHandler(id)}
            alternarParaFeito={(id) => alternarParaFeitoHandler(id)}
            todo={todo}
            key={todo.id}
            />
            )}
            </div>
            </>
          )
        }
    }
  }
}


-----REDUCER-----
{
  Por que usar reducers?
  Os reducers nos permitem lidar com transições de estado e lógica de maneira previsível.
  Ao encapsular toda a lógica do state em um arquivo separado, obtemos um código mais limpo e legível.

  Um exemplo simples:
  Digamos que temos uma página com uma lista de alunos onde o usuário pode fazer duas coisas: Adicionar um novo aluno à lista | Excluir alunos da lista

  É assim que o código ficaria sem um reducer:
  {
    // Arquivo: Students.jsx
    
    const [students, setStudents] = useState([
        { studentId: 1, firstName: 'John', lastName: 'Doe' },
        { studentId: 2, firstName: 'Jane', lastName: 'Smith' },
        { studentId: 3, firstName: 'Amit', lastName: 'Patel' },
        { studentId: 4, firstName: 'Emily', lastName: 'Johnson' },
      ]);
    
      // Função para adicionar um aluno
      const handleAddStudent = (studentId, firstName, lastName) => {
        setStudents([...students, { studentId, firstName, lastName }]);
      };
    
      // Função para excluir um aluno
      const handleDeleteStudent = (studentId) => {
        const updatedStudents = students.filter((student) => student.studentId !== studentId);
        setStudents(updatedStudents);
      };
    
    // Para manter a simplicidade, foram omitidas partes do código, incluindo o template.
  }

  Se quisermos mover essas funções para um arquivo separado para limpar o componente Students, podemos criar um reducer em 3 etapas simples:

  ETAPA 1. Crie um arquivo reducer onde ficará a lógica para lidar com os alunos. A função reducer deve declarar os tipos de ação para que possamos despachar mais tarde:
  {
    // Arquivo: studentsReducer.js
    
    const studentsReducer = (state, action) => {
      
    switch (action.type) {
        case 'added':
          return [...state, action.newStudent];
        case 'deleted':
          return state.filter((student) => student.studentId !== action.studentId);
        default:
          return state;
      }
    };
    
    export default studentsReducer;

    * Observe como a função reducer recebe o estado atual, faz a transformação e retorna o estado atualizado.
  }

  ETAPA 2. Em vez de usar o hook useState com um método setStudents, usamos o hook useReducer e passamos dispatch como o método setter. O dispatch executará um reducer, que deve ser passado como primeiro argumento da função useReducer (neste caso, o StudentsReducer):
  {
    // Arquivo: Students.jsx (Não se esqueça de importar StudentsReducer e useReducer no topo)
    
    const [students, dispatch] = useReducer(studentsReducer, [
        { studentId: 1, firstName: 'John', lastName: 'Doe' },
        { studentId: 2, firstName: 'Jane', lastName: 'Smith' },
        { studentId: 3, firstName: 'Amit', lastName: 'Patel' },
        { studentId: 4, firstName: 'Emily', lastName: 'Johnson' },
      ]);
  }

  ETAPA 3. Nos locais onde chamaríamos as funções handleAddStudent e handleDeleteStudent, despachamos as ações, que executarão a função reducer:
  {
    // Arquivo: Students.jsx
    
    <button 
      onClick={dispatch({ type: 'added', newStudent: { studentId, firstName, lastName } })}
    >
      Add Student
    </button>
    
    <button 
      onClick={dispatch({ type: 'deleted', studentId: studentId })}
    >
      Delete Student
    </button>
    
    // Para simplificar, foi omitido o código onde obteríamos studentId, firstName e lastName dos campos do formulário.

    * Como você verá em alguns exemplos do curso, é uma prática comum passar as propriedades necessárias para o redutor como 'payload' em vez de 'newStudent', 'studentId', etc.
  }


  E é só isso! Em 3 etapas simples, conseguimos mover a lógica para adicionar e excluir alunos em um arquivo separado.
}


-----EFFECT (com localStorage)-----
{
  O hook useEffect do React permite que algo seja feito toda vez que o DOM iniciado ou atualizado. Também é ativado quando uma variável de um estado é modificada (atualizada). Ex.:

  const lista = localStorage.getItem('listar') ? JSON.parse(localStorage.getItem('listar')) : []; > Significa que a lista criada receberá algo armazenado no navegador ou um array vazio.

  const [listar, dispatch] = useReducer(TodosReducer, lista); > Aqui é a declaração de um reducer com o estado da lista, chamado de listar

  useEffect(()=>{
        localStorage.setItem('listar', JSON.stringify(listar));
      },[listar])


  No exemplo acima, esse método é ativado assim que a página é carregada, junto com o estado da lista "listar", pois assim insere na memória do navegador o conteúdo da lista.
  *Para que o effect ative novamente e atualize os dados da lista, dentro de [] foi adicionado o estado "listar". Toda vez que é alterado, o effect ativa.

  A estrutura original de effect, encontrada na página oficial, é:

     useEffect(()=>{
      },[])
}


-----ROUTER-----
{
  INSTALAÇÃO
  {
    No React, o React Router não vem instalado por padrão quando você cria um projeto com Create React App (CRA) 
    ou outras ferramentas como Vite. Você precisa instalar o pacote separadamente.

    Para instalar, use o seguinte comando no terminal dentro do diretório do seu projeto React:

    npm install react-router-dom

    Após a instalação, você pode começar a usar o React Router importando os componentes necessários, como 
    BrowserRouter, Routes, Route, entre outros, dessa forma: import { BrowserRouter, Routes, Route } from 'react-router-dom';
  }

  ESTRUTURA DO ROUTER
  {
    <>
      <BrowserRouter>
        <Routes>
          <Route>
        </Routes>
      </BrowserRouter>
    </>
  }

  <ROUTE>
  {
    <Route path="/" element={<componente />} /> //Use isso para definir o componente que será a página inicial
    <Route index element={<componente />} /> //Outra maneira de definir a página inicial automaticamente
    <Route path="pagina1" element={<componente1 />} /> //Use isso para definir o caminho de outro componente em outra página
    //seguinte à página inicial
  }

  REDIRECIONADORES <NavLink> e <Link>
  {
    NavLink:
    Redireciona para outra página (ou permanece se for a principal) como se fosse a tag <a>, envolvendo um elemento. Ex.:
      import {NavLink} from "react-router-dom"
      <NavLink to="/pagina1"> className={({ isActive }) => (isActive ? "active-link" : "inactive-link")} <button>Acesse a página 1</button></NavLink>
      <NavLink to="/pagina2"> <button>Acesse a página 2</button></NavLink>
    *Após clicado e ativado, o <NavLink> adiciona automaticamente uma className chamada "active" na tag <a> que é gerada na 
    página como HTML e JS.

    Link:
    Também redireciona, mas NÃO é adicionada uma className chamada "active".
    <Link to="/pagina1"> <button>Acesse a página 1</button></Link>
    <Link to="/"> <button>Voltar para home</button></Link>
  }

  -----NAVIGATE - REDIRECIONADOR PROGRAMÁTICO-----
  {
    O Navigate é um hook (useNavigate) que é utilizado para redirecionar para outra página de forma programada, sem o usuário clicar para ir.
    Deve-se importar o hook primeiro: import {useNavigate} from 'react-router-dom';

    const navigate = useNavigate(); //Cria uma variável para receber a funcionalidade do navigate.

    //Dentro de uma função, por exemplo de confirmação de compra ou algo que seja necessária a mudança de página, o navigate redireciona a página.
    navigate("/"); //Aqui ele faz o retorno para a página inicial, mas poderia ser outra rota qualquer, tipo depois de um login, por exemplo.

  }

  USEPARAMS
  {
    O useParams é um hook fornecido pelo React Router que permite acessar os parâmetros dinâmicos da URL 
    em componentes funcionais do React. Ele é muito útil quando você define rotas com parâmetros dinâmicos 
    (como IDs, nomes ou outras variáveis) e precisa usá-los no componente correspondente.

    Use Params quando você tem uma rota que inclui parâmetros dinâmicos, como:
      /product/:id
      /user/:username
      /blog/:postId
    *Esses parâmetros podem ser acessados pelo componente que é renderizado para essa rota.

     <Route path="/product/:id" element={<ProductPage />} /> //No arquivo App define o caminho e diz que o valor que vier
     //depois de /product será chamado de id.

     const { id } = useParams(); //No componente ProductPage, quando o usuário acessa, por exemplo, /product/123, 
     //o useParams retorna um objeto com os valores dos parâmetros definidos na rota, que é "123", ficando id{"123"}

     *Atenção a valores nulos: Se o parâmetro não for encontrado ou a rota não corresponder, o useParams retornará um 
     objeto vazio {}.
     
     **Sincronização com a URL: Sempre que a URL muda, o valor retornado por useParams é atualizado automaticamente.
  }
}

-----EXPORTAR EM PDF-----
{
  ***Não funciona quando tem efeitos de sombra, clip paths, etc. Tem que salvar no elemento pai, senão não aparecem os estilos por causa do Sass que coloca uma classe dentro de outra.
  1- Instale a biblioteca html2pdf.js: Se ainda não tiver a biblioteca instalada, você pode instalá-la usando no terminal o código: npm install html2pdf.js
  2- Crie o Componente com o botão de salvar: Dentro do seu componente, você pode criar um botão que, quando clicado, salva a mídia impressa como um PDF.
  EXEMPLO:
  {
    import React, { useRef } from 'react';
    import html2pdf from 'html2pdf.js';

    const MediaPrintComponent = () => {
      const printRef = useRef();

      const handleSaveAsPDF = () => {
        const element = printRef.current;
        const options = {
          margin: 0.5,
          filename: 'documento.pdf',
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { scale: 4 },
          jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
        };
        html2pdf().from(element).set(options).save();
      };

      return (
        <div>
          <div ref={printRef}>
            <h1>Minha Mídia Impressa</h1>
            <p>Este é o conteúdo que será exportado para PDF.</p>
            <p>Você pode adicionar mais conteúdo aqui.</p>
          </div>

          <button onClick={handleSaveAsPDF}>Salvar como PDF</button>
        </div>
      );
    };
    export default MediaPrintComponent;
  }

  Como Funciona:
  {
    useRef: Estamos usando o useRef para criar uma referência para o conteúdo que queremos salvar como PDF.
    html2pdf: Quando o botão é clicado, chamamos o método html2pdf().from(element) para converter o conteúdo referenciado (o div com o conteúdo) em um arquivo PDF.
    Configuração do PDF: Você pode personalizar várias opções, como o nome do arquivo (filename), qualidade da imagem, margens, e outros detalhes para o layout.
    Personalizações:
    O html2pdf permite que você defina opções como margens, formato da página, e qualidade da imagem.
    Se quiser usar um formato diferente, pode ajustar o parâmetro jsPDF para algo como A4 ou outro.
    Essa abordagem permite que você adicione facilmente a funcionalidade de salvar o conteúdo de uma mídia impressa como PDF diretamente em um componente React, 
    sem a necessidade de criar um componente separado.
  }
}