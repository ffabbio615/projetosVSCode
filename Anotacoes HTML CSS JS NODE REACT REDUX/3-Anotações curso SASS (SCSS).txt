O QUE É SASS?

É uma linguagem de extensão para CSS (SCSS) que adiciona funcionalidades avançadas ao CSS tradicional, facilitando o desenvolvimento de estilos para páginas web.
Com Sass, você pode usar recursos que não estão disponíveis no CSS puro, como:

-----VARIÁVEIS: Permite definir valores reutilizáveis para cores, tamanhos, etc-----
$primary-color: #3498db;
body {
  background-color: $primary-color;
}


-----NESTING (Aninhamento): Facilita a escrita de regras CSS dentro de outras, refletindo a estrutura HTML-----
nav {
  ul {
    margin: 0;
    padding: 0;
    li {
      display: inline-block;
    }
  }
}


-----MIXINS: Permitem reutilizar blocos de código-----
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
.container {
  @include flex-center;
}

@mixin rtl($property, $ltr-value, $rtl-value) {
  #{$property}: $ltr-value;

  [dir=rtl] & {
    #{$property}: $rtl-value;
  }
}

.sidebar {
  @include rtl(float, left, right);
}




-----HERANÇA: Facilita a reutilização de estilos, permitindo que um seletor herde propriedades de outro-----
%button-style {
  padding: 10px 20px;
  border-radius: 5px;
}
.button {
  @extend %button-style;
}


-----OPERAÇÕES MATEMÁTICAS: Permite fazer cálculos diretamente nos estilos-----
.container {
  width: 100% - 20px;
}


-----ESTRUTURAS CONDICIONAIS E DE CONTROLE: @if, @for, @each e @while

IF: Funciona como uma condicional. Você pode verificar condições e aplicar estilos dinamicamente.
$theme: dark;

body {
  @if $theme == dark {
    background-color: black;
    color: white;
  } @else {
    background-color: white;
    color: black;
  }
}

FOR: Cria loops numéricos, ideal para gerar estilos iterativamente, como classes ou seletores. | Para gerar estilos com valores incrementais ou uma quantidade definida de vezes.
@for $i from 1 through 5 {
  .box-#{$i} {
    width: #{100 * $i}px;
    height: #{50 * $i}px;
  }
}
Resultado em CSS
.box-1 {
  width: 100px;
  height: 50px;
}

.box-2 {
  width: 200px;
  height: 100px;
}

.box-3...

EACH: Itera sobre listas ou mapas (estruturas semelhantes a arrays ou objetos no SASS). | Para iterar sobre listas ou mapas.
$colors: red, green, blue;

@each $color in $colors {
  .bg-#{$color} {
    background-color: $color;
  }
}
Resultado em CSS
.bg-red {
  background-color: red;
}

.bg-green {
  background-color: green;
}

.bg-blue {
  background-color: blue;
}

Exemplo com Map:
$themes: (
  dark: black,
  light: white
);

@each $name, $color in $themes {
  .theme-#{$name} {
    background-color: $color;
  }
}
Resultado em CSS:
.theme-dark {
  background-color: black;
}

.theme-light {
  background-color: white;
}

WHILE: Funciona como um loop tradicional, repetindo até que uma condição seja falsa. | Quando o loop depende de uma condição dinâmica.
$i: 1;

@while $i <= 5 {
  .item-#{$i} {
    margin-left: #{10 * $i}px;
  }
  $i: $i + 1; // Incrementa $i
}
Resultado em CSS:
.item-1 {
  margin-left: 10px;
}

.item-2 {
  margin-left: 20px;
}

item-3...




-----INSTALAÇÃO DO SASS-----

Para instalar o SASS, deve-se usar o seguinte código no terminal: npm install --save-dev sass
*Aparecerá uma dependência nas configurações do projeto para habilitar o SASS. Tudo em SASS será compilado posteriormente para CSS, para que o browser possa ler os arquivos.



-----MODULOS SCSS-----

Como as páginas de estilo ficam globalmente acessíveis entre os arquivos JSX, precisamos criar os módulos SCSS para evitar que alguma classe possua o mesmo nome e o novo estilo cause uma
mudança no estilo do outro elemento da outra página. Para garantir que possa utilizar o mesmo nome de classe, temos que fazer:

1-Mudar o nome do arquivo SCSS, adicionando ".module" no nome para identificarmos que se trata de um módulo
2-Imporar esse arquivo de módulo no arquivo JSX de forma diferente do normal: "import  classes  from './nomeDoEstilo.module.scss'"
3-Trocar o className que adiciona o nome da classe para a versão sem aspas, dentro de chaves: "<div className={classes.nomeDaClasseDoConflito} </div>
***NÃO pode utilizar isso quando as classes possuem nomes com hífen, ex.: "<p> className={classes.nome-da-classe-do-conflito} </p>
****Para utilizar classes com hífens, precisamos alterar o acesso da classe no elemento, colocando colchetes e aspas. Ex.: <p> className={classes['nome-da-classe-do-conflito']} </p>
*****Para trabalhar com múltiplas classes, precisamos adicionar JS nesse acesso. Ex.: <p> className={`${classes['nome-da-classe-do-conflito']} ${classes.segundaClasse}`} </p>