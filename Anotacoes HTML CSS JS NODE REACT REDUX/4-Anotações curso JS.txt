Variáveis objetos e arrays:

Let > que varia
Const > que continua com o mesmo valor
>>>>>Para definir o tipo da variável, para uma let com nome de "numero", será assim:
numero = Number(numero); numero = String(numero); numero = Boolean(numero); numero = Array(numero); numero = Object(numero); numero = Function(numero);

ARRAY
nomedoArray.length (tamanho do array)
nomeDoArray.push (adicionar valor depois do último elemento do array)
nomeDoArray.unshift (adiciona valor antes do primeiro elemento do array)
nomeDoArray.pop (remove valor do último elemento do array)
nomeDoArray.shift (remove valor do primeiro elemento do array)
nomeDoArray.slice (0,X) (seleciona dentro do array os slots 0 até X)
arrayComDoisIndices = [ [1,2,3] [4,5,6] [7,8,9] ]; (Temos os índices 0,1 e 2 dentro dos índices 0,1 e 2. Para acessar o 6 > arrayComDoisIndices[1][2])
Object.freeze(nomeDoArray); (congela os valores e não permite mudar. Serve para objetos também)


OBJETOS
Object.defineProperty(obj, 'nome', { enumerable: true, value: nome, writable: false, configurable: false }); > Configuração de uma chave privada do objeto.
Object.defineProperties(obj, {nome: {enumerable: true, value: nome, writable: false, ...}}) > Configuração de várias chaves privadas num objeto.
Enumerable a torna exibível, value atribue o valor passado como parâmetro no método construtor, writable não permite alterar o valor depois de atribuido e
configurable não permite mais configurar a chave, assim como apagar, etc.
Object.getOwnPropertyDescriptor(obj, nome); > Recupera os dados da chave nome no objeto, informando se é enumerable, writable e configurable.
Object.keys (pessoa); > mostra as chaves do objeto (nome, sobrenome, idade, etc)
Object.values(pessoa); > mostra os valores das chaves do objeto.
const produto = {nome: 'caneca', preco: 30.0}; const p = {...produto} > Chamado de Spread, em vez de ambas apontarem para o mesmo endereçamento de memória,
as constantes agora são independentes.
const produto = {nome: 'caneca', preco: 30.0}; const p = Object.assign({}, produto); > Outra forma de copiar um objeto sem ter o mesmo endereço de memória
Produto.prototype.nomeCompleto = function(){ return this.nome + ' ' + this.sobrenome; } > Atribui um método ao objeto sem utilizar dentro do construtor,
através do __proto__ (prototype) dele.
Object.setPrototypeOf(cidadaoBrasileiro, cidadaoPortugues); > O objeto cidadaoBrasileiro recebe, sem construtor, o protótipo do objeto cidadaoPortugues.
O construtor é um molde que dá os protótipos iguais para os objetos, mas dá para herdar de outro objeto sem ele pelo "setPrototypeOf".
DENTRO DO CONSTRUTOR DE CAMISETA: Produto.call(this, nome, preco); > Serve para herdar atributos do método construtor Produto.
Camiseta.prototype = Object.create(Produto.prototype); > Cria um objeto prototype de produto dentro do objeto camiseta.
Camiseta.prototype.constructor = Camiseta; > Recebe o prototype construtor do objeto original (Camiseta), caso tenha recebido outro prototype, tipo produto


POO
Factory function (funções normais que não precisam de New Aula75) | Constructor Function (funções construtoras Aula77)

EXPORTAR E IMPORTAR UMA FUNÇÃO (MODULES) VER AULA 118
Criar dentro do arquivo1.js uma função > export default function nomeDaFuncao(){}
Importar dentro do arquivo2.js a função > import nomeDaFuncao from './arquivo1';

CLASSES
Class NomeEmMaiusculo > Inicia uma classe
const _atributoPrivado = Symbol('Aqui pode colocar qualquer descrição se quiser'); > Declaração de atributo privado
#atributoPrivado > Nova declaração de atributo privado. Para chamar dentro da classe, utilizar this.#atributoPrivado. Para fora, usar get.
constructor(atributo1, atributo2){this.atributo1=atributo1;...} > Método construtor da classe
this[_atributoPrivado] = valor > Forma de usar o atributo privado
set acaoAtributo(atributo){this.atributo=atributo} > Método set da classe
get acaoAtributo(){return this.atributo} > Método get da classe
metodoDaClasse(){} > Função (método) de uma classe em javascript
HERANÇA
Class NomeEmMaiusculo extends OutraClasse > Inicia uma classe herdando de OutraClasse (Aula104)
constructor(atributo1, atributo2){super(atributo1); this.atributo2 = atributo2;} > Inicia um construtor na filha e herda atributo1 de pai (em ordem)
MÉTODO ESTÁTICO
static nomeDoMetodo(){} > Método estático que só pode ser utilizado pela classe. Um exemplo de uso é uma classe com métodos de abrir arquivo, salvar, etc
NomeDaClasse.nomeDoMetodo(); > Para utilizar um método estático, não se pode instanciar um objeto da classe, e sim chamar pela própria classe.


COMANDOS AVULSOS:
Console.log(""); > Mostrar alguma coisa ou resultado no console
Typeof> Diz o tipo da variável
Instanceof > Diz se é uma instância de um objeto. Ex.: new Date(); é uma instanceof Date
<script src=""></script> > Abre um arquivo, seja em JS ou outros
Alert, confirm e prompt > caixas de informação, de confirmação e de inserção de informação, respectivamente


TIMERS
setInterval(const t = function (){método();}, 1000); > Realiza a função de 1 em 1 segundo, sendo o tempo em milisegundos, por isso 1000 para dar 1 segundo
setTimeout(function(){clearInterval(t);}, 10000); > Realiza o cancelamento do timer com (clearInterval) em 10 segundos. Pode usar a função sem o
  "clearInterval", mas o timer só funcionará 1 vez, difente do setInterval, que funciona direto até ser desativado.


MATH:
.floor > retira as casas decimais e arredonda para baixo
.ceil > retira as casas decimais e arredonda para cima
.round > arredonda um número para cima ou baixo - tipo 9.49 para 9 ou 9.5 ou mais para 10
.min e .max > pega da sequência o menor e o maior número dentro de uma sequência de números | *Para pegar o maior número em um array, precisa fazer o spread. Ex.: Math.max(... array);
.random > pega um número aleatório entre 0 e 1 (se quiser por exemplo de 0 a 9, será random() *10. Para 1 até 10, ficará random() *10 +1)
.toFixed(x) > Retorna o número de casas decimais após a vírgula em x quantidade.


STRINGS
.includes("texto"); > Verifica se um texto, letra ou palavra específicos estão dentro da frase
.replace("texto", ""); > Pega todas as palavras "texto" e substitui por "" | .replace("texto", "").trim(); > Retira os espaços em branco
.replace(/\D+/g, ''); > Pega o texto e substitui tudo que não for número por ''
.toString("variavelNumerica"); > Converte qualquer informação de outros tipos de variáveis em texto
.toLowerCase(); > Converte as letras em minúsculas
.toUpperCase(); > Converte as letras em maiúsculas
.endswith('letra'); > Checa se a string termina com a letra escolhida
.split(' '); > Cria um array separando as Strings que vem depois de um espaço vazio ' '
palavra = frase.shift(); > Palavra recebe primeira palavra e a remove da frase
.join(' ') > Junta todas as palavras de um array de string, mas separando-as por um espaço vazio ' '
constante = String.fromCharCode(65); > Pega uma letra, nesse caso letra A, de um charCode


DATAS
const data = new Date(); > Cria variável recebendo a data atual
data.getDate(); > Mostra o dia em número
data.getDay(); > Mostra o dia da semana, sendo domingo 0 e sábado 6
data.getMonth(); > Mostra o mês, sendo janeiro 0 e dezembro 11
data.getFullYear(); > Mostra o ano
data.getHours(); > Mostra as horas
data.getMinutes(); > Mostra os minutos
data.getSeconds(); > Mostra os segundos
data.getMilliseconds(); > Mostra os milisegundos
OBS.: Se os números forem menores que 10 sem ser no dia da semana, tem que adicionar 0 a esquerda


OPERADORES DE COMPARAÇÃO
> OU < Maior ou menor
>= OU <= Maior que ou menor que
== Igual / Checa valor
=== Igual estrito / Checa valor e tipo
!= Diferente / Checa valor
!== Diferente Estrito / Checa valor e tipo
|| Ou / Uma coisa ou outra


ESTRUTURA DE CONDIÇÃO (IF COMPACTO)
//Função que recebe dois números e exibe o maior > const maior = (x,y) => x > y ? x : y | console.log (maior(10, 5));
--Maior vai receber X e Y, depois se X for maior que Y, então exibe X, senão exibe Y--


ESTRUTURAS DE REPETIÇÃO
For in > Utilizado em arrays e objetos, ele percorre os índices. Ex.: const frutas = [maçã, banana, pêra]; | for (let i in frutas){console.log(frutas[i]);}
For of > Utilizado somente em arrays, percorre o valor dos índices. Ex.: const frutas = [maçã, banana, pêra]; | for (let i of frutas){console.log(i);}
For each > Também percorre os valores através de uma função. Ex.: const frutas = [maçã, banana, pêra]; | frutas.forEach(function(i){console.log(i);});
Break e Continue> O break encerra as ações na estrutura de repetição. O continue pula uma das repetições caso a condição seja atendida.


ARROW FUNCTION - Uma forma mais curta e moderna de escrever funções em JavaScript. Elas oferecem várias vantagens, especialmente no contexto do React e desenvolvimento moderno.
Forma tradicional:
function soma(a, b) { return a + b; }

Arrow function equivalente:
const soma = (a, b) => a + b;

Sem parâmetros:
const log = () => console.log("Hello, World!");

Com um único parâmetro (sem parênteses):
const quadrado = x => x * x;

Com múltiplas instruções (usar {}):
const soma = (a, b) => {
  const resultado = a + b;
  return resultado;
};



TRATAMENTO DE ERROS (TRY CATCH THROW FINALLY)
Try/Catch > try{ blocoASerTratado } catch(erro){ console.log("Ocorreu um erro."); } > Exibe "Ocorreu um erro" quando ocorre um erro. É uma forma genérica
Throw > function (){throw ("Ocorreu um erro.");} try{chamaFUncao} catch (erro){console.log(erro);} > Exibe a mensagem "Ocorreu um erro" que está em throw.
Finally > finally{console.log("Finally sempre será executado");} > Depois do catch, se houver um finally, ele sempre será executado, independente do erro.



DOM (Document Object Model) > É a árvore de elementos que encontramos numa linguagem. Por exemplo o HTML, começa com Window, depois vem Document, depois
HTML, depois Head, Body, e por aí vai.


JSON
const variavel = JSON.stringify(variavelConvertidaEmStringJSON); > Comando que converte uma variável em string JSON para ser armazenada
localStorage.setItem("nomeDoArmazenamento", variavel); > Cria o armazenamento local "nomeDoArmazenamento" e salva tudo que está em "variavel"
const variavel = localStorage.getItem("nomeDoArmazenamento"); > Recupera os dados do armazenamento local chamado "nomeDoArmazenamento"
const lista = JSON.parse(variavel); > Adiciona todos os dados da lista do armazenamento local numa lista


JAVASCRIPT-HTML

SELECIONAR ELEMENTOS POR ID, CLASSE OU TIPO:
document.querySelector('#idDoElementoHtml'); > Seleciona um elemento HTML pelo id dele. Uma variável recebendo isso passa a ter tudo do elemento
document.querySelector('.classeDoElemento'); > Seleciona um elemento HTML pela classe dele.
document.querySelector('.classe h1'); > Seleciona um elemento HTML, nesse caso h1, dentro do elemento com a classe selecionada.
document.getElementById("idDoElementoHtml"); > Seleciona um ID, porém não precisa de #
document.getElementByClass('classeDoElemento'); > Seleciona uma classe, porém não precisa de pronto
document.getElementById('idDoElementoHtml').getElementsByClassName('classeDoElementoHtml'); > Seleciona todas as classes com nome específico dentro de um id
document.querySelectorAll('p'); > Seleciona todos os elementos <p> do documento, criando uma node list. > Node List (Similar ao array, pode utilizar os
índices para manipular seus atributos internos)
elemento.classList.contains('cpf'); > Seleciona o elemento no qual contém em sua ou suas classes uma com o nome "cpf".


CALLBACK> Funciona quando você quer que algo só funcione depois de uma certa atividade, por exemplo abrir o painel do sistema após esperar o login ser feito


IIFE (Expressão de função invocada imediatamente) > Cria uma função fora do escopo global que realiza qualquer coisa dentro dela, como se fosse na linha de
código normal, mas sem exibir ao usuário. 
Ex.: (function(){variáveis e funções})();


EVAL > Avalia se um objeto de document possui a string válida para executar uma ação em javascript. Ex.: inputDeSoma = document.querySelector(.soma);
const conta = eval(inputDeSoma.value); | É bom usar dentro de try/catch


ADICIONAR EVENTO A UM ITEM HTML
botao.onclick = function(){ }
botao.addEventListener('click', e => {});
botao.addEventListener('submit', function (parametro) {}); > Adiciona um evento a um elemento com ação dentro da função
elemento.preventDefault(); > Cancela a ação de um elemento, tipo cancelar o post de um form
elemento.getAttribute('href'); > Seleciona um atributo de um elemento HTML. Nesse exemplo foi pego o link que está dentro de uma tag <a>
SELECIONAR UM ITEM ESPECÍFICO DO MESMO TIPO SEM FICAR ADICIONANDO EVENTOS COM FOR
const elemento = e.target; > Pega o elemento que foi clicado, por exemplo | const alvo = elemento.tagName.toLowerCase(); > 
Pega o nome do elemento que foi clicado, seja ele div, a, button, etc | if (alvo === 'a'){} > Se o elemento clicado for um 'a', então faz a ação.



CRIAÇÃO, MODIFICAÇÃO E REMOÇÃO EM ELEMENTOS HTML COM JAVASCRIPT
document.createElement('p'); > Cria um elemento HTML. Nesse caso P (parágrafo) foi criado
elemento.remove(); > Remove um elemento HTML
variavelQueRecebeuUmaTag.innerHTML = ''; > Mexe dentro do conteúdo de uma TAG. Nesse caso limpou o que estava dentro da TAG, tipo apagar uma Div
variavelQueRecebeuUmaTag.innerHTML.appendChild(TAGHTML); > Adiciona dentro de uma TAG (tipo uma DIV) um elemento HTML 
(pode ser um parágrafo, um pedaço novo de página)
variavelQueRecebeuUmaTag.insertAdjacentElement('afterend', div); > Adiciona logo após uma variável uma div, em vez de dentro, como appendChild.
const nomeDoElementoAnterior = elemento.previousElementSibling.innerText; > Recupera o texto do elemento anterior ao elemento em questão.

DIFERENÇA ENTRE INNERTEXT E TEXTCONTENT:
.innerText = ''; Atribui um valor de texto a um elemento, porém ele deve ter display diferente de none, ou seja, ser visível
.textContent = ''; Faz a mesma coisa que innerText, porém com qualquer elemento, estando ele visível ou não.

ATRIBUIR A UMA VARIÁVEL TODOS OS ESTILOS DE CSS QUE FORAM COMPUTADOS A UM ELEMENTO. POR EXEMPLO NO BODY:
const estilosBody = getComputedStyle(document.body);



PROMISES
return new Promise((resolve, reject) =>{}); > Inicia o tratamento dentro de uma função, com os retornos positivo (resolve) e negativo (reject)
.then(parametro => {console.log(parametro);}); > retorno positivo aplicado após chamar a função
.catch(parametro => {console.log(parametro);}); > retorno positivo aplicado após chamar a função

async function nomeDaFuncao(){
  try{const variavel = await algoQuePrecisaSerChecado}catch(erro){}
}


EXPORTAÇÃO E IMPORTAÇÃO DE QUALQUER ELEMENTO DE UM ARQUIVO JS (ES6)

EXPORT
export class Pessoa{} | export metodoExecutado(){}; | export const variavel = valor; > Exportação simples de classe, método e variável
export { variavel as nomeNovo }; | export { variavel as default }; > Exportação de uma váriavel com novo nome e outra variavel como padrão
export default class Pessoa{} | export default metodoExecutado(){}; > Exportação de classe e método como padrão. *Somente pode haver 1 padrão exportado

IMPORT
import * as objeto from "./nomeDoArquivo.js"; > Importa tudo de um arquivo como um objeto
import { Pessoa, metodoExecutado as nomeNovoParaEsseMetodo, variavel } from "./nomeDoArquivo.js"; > Importação com o mesmo nome ou atribuindo um novo
import default from "./nomeDoArquivo.js"; > Importa o que foi exportado como padrão


EXPORTAÇÃO E IMPORTAÇÃO COM MODULES

EXPORTAÇÃO
module.exports.nomeNovo = nome; OU exports.idadeNova = idade; > Exporta a variável nome como nomeNovo. Tanto faz usar module ou exports direto
module.exports = function (a, b){return a * b;}; > Exporta uma função anônima e retorna o resultado dela quando for utilizada no arquivo de importação
module.exports = { nome, idade }; > Exporta mais de uma variável ao mesmo tempo. Quando exporta mais de uma, não pode usar exports direto

IMPORTAÇÃO
const modulo = require("./nomeDoArquivo.js"); > Faz um requerimento de importação obtendo todos os exports feitos no outro arquivo "nomeDoArquivo.js"
const idade = modulo.idadeNova; > Atribui a idade o valor de importação da idade que está dentro do módulo exportado
